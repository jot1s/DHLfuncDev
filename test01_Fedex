import http.client
import urllib.parse
import json
import time
from datetime import datetime
import os
# Import modules for Excel handling
import openpyxl as xl_read
import xlsxwriter as xl_writer
import PySimpleGUI as sg
import pandas as pd

    
import requests

# path = "C:\\game\\DHLfuncDev\\DHL_API_Sheet.xlsx"

current_directory = os.path.dirname(__file__)
# Construct the new path relative to the current directory
path = os.path.join(current_directory, "DHL_API_Sheet.xlsx")
# Use the new path
print("Relative path:", path)

wb_obj = xl_read.load_workbook(path)
sheetName = "Sheet1"
baseRow = 1   ## base row start with row 2
sheet_obj = wb_obj[sheetName]   ## checking the sheet object in the page call "Sheet1"

fedexToken = ""



# def SendAPI(trackingNumber):
    # params = urllib.parse.urlencode({
    #     # 'trackingNumber': '6921406671',
    #     'trackingNumber': "'" + str(trackingNumber) + "'",
    #     'service': 'express'
    # })

    # headers = {
    #     'Accept': 'application/json',
    #     'DHL-API-Key': 'apI1hL9eB7gG7b'
    # }

    # connection = http.client.HTTPSConnection("api-eu.dhl.com")

    # connection.request("GET", "/track/shipments?" + params, "", headers)
    # response = connection.getresponse()

    # status = response.status
    # reason = response.reason
    # data = json.loads(response.read())

    # print("Status: {} and reason: {}".format(status, reason))
    # print(data)
    
    # connection.close()
    # return data

# def CheckInfo_API(trackingNumber, x, y):
#     print("trackingNumber: ", trackingNumber  , "Row: " ,x , "Column: " ,y)
    
    
    


def track_package_test(token):

    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    # url = "https://apis-sandbox.fedex.com/track/v1/trackingnumbers"
    url = "https://apis.fedex.com/track/v1/trackingnumbers"
    

    # Define the payload with the tracking number
    payload = {
    "trackingInfo": [
        {
        "trackingNumberInfo": {
            "trackingNumber": "776218104249"
        }
        }
    ],
    "includeDetailedScans": True
    }

    # Convert the payload to JSON format
    payload_json = json.dumps(payload)

    headers = {
        'Content-Type': "application/json",
        # 'X-locale': "de_DE",
        'Authorization': "Bearer "+token  # Replace YOUR_ACCESS_TOKEN with your actual access token
    }

    response = requests.post(url, data=payload_json, headers=headers)

    # print(response.text)
    
    trackingNumber = response.json()['output']['completeTrackResults'][0]['trackingNumber']
    latestStatusDetail = response.json()['output']['completeTrackResults'][0]['trackResults'][0]['latestStatusDetail']
    statusByLocale = latestStatusDetail['statusByLocale']
    description = latestStatusDetail['description']
    
    print(trackingNumber)
    print(latestStatusDetail)
    print(statusByLocale + " || " + description)




def FedexToken_func ():

    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    # url = "https://apis-sandbox.fedex.com/oauth/token"
    url = "https://apis.fedex.com/oauth/token"

    # Define your API key and client secret    ///  sendBox
    # api_key = "l7aed6bf7203184b21bc82bc3e39a6d333"
    # client_secret = "ae6246f9ff9a4c7d9f49c6f665a765a1"
    
    api_key = "l727fcc0181cb045ffb5fb61d1eeeff3d2"
    client_secret = "fa254dbe09d5421b9cc2fe514e8670e7"

    # Define payload with API key and client secret
    payload = {
        'grant_type': 'client_credentials',
        'client_id': api_key,
        'client_secret': client_secret
    }

    # Encode payload as form data
    encoded_payload = "&".join([f"{key}={value}" for key, value in payload.items()])

    headers = {
        'Content-Type': "application/x-www-form-urlencoded"
    }
    response = requests.post(url, data=encoded_payload, headers=headers)
    print(response.text)
    print(response.status_code)
    
    response_data = response.json()
    access_token = response_data.get('access_token')
    # print("Access Token:", access_token)
    fedexToken =access_token
    
    track_package_test(fedexToken)
    
    
FedexToken_func()























































# def WriteInfo_excel(x, y, value):
#     print("WriteInfo_excel: ", x, y, value)
#     sheet_obj.cell(x, y).value = value
#     wb_obj.save(path)



# sg.theme('Dark Brown')   


# layout = [

#     [sg.Text("Auto fill-in Excel" , justification='center',size=(50,1))],
#     [sg.Button('Open Excel'), sg.Button('TrackingNumber API fillin')]
    
# ]

# window = sg.Window("Column Demo", layout)
# while True:
#     event, values = window.read()
    
#     if event == "Open Excel":
#         os.startfile(path)
#         break
    
#     if event == "TrackingNumber API fillin":

#         for i in range(1, 10):   ## for loop row to check trackingnumber is exist
#             status_row = sheet_obj.cell( baseRow + i, 3).value
#             trackingNumber_row  = sheet_obj.cell( baseRow + i, 1).value  
#             # print("sheet_obj: ", sheet_obj.cell( baseRow + i, 3).value)  ##Checking Status
            
#             if trackingNumber_row == None:
#                 break

#             if status_row == None and trackingNumber_row != None:  ##  is None
#                 # time.sleep(0.5)  # Add a delay of 0.2 seconds   
#                 CheckInfo_API(sheet_obj.cell(baseRow + i, 1).value , baseRow + i, 1 )
#             else:
#                 print("Status and TrackingNumber == None ", status_row)
        
        
        
  
# window.close()


#     if (sheet_obj[
#     print("sheet_obj: ", sheet_obj.cell(i, 1).value)  ## (1,1) output "Tracking Number" (A1)

# trackingNumber = sheet_obj.cell(2, 1).value
# print( "sheet_obj: ",  sheet_obj.cell(2, 1).value  )  ## (1,1) output "Tracking Number" (A1)


# params = urllib.parse.urlencode({
#     # 'trackingNumber': '6921406671',
#     # 'trackingNumber': "'" + str(trackingNumber) + "'",
#     'service': 'express'
# })

# headers = {
#     'Accept': 'application/json',
#     'DHL-API-Key': 'apI1hL9eB7gG7b'
# }

# connection = http.client.HTTPSConnection("api-eu.dhl.com")

# connection.request("GET", "/track/shipments?" + params, "", headers)
# response = connection.getresponse()

# status = response.status
# reason = response.reason
# data = json.loads(response.read())

# print("Status: {} and reason: {}".format(status, reason))
# print(data)

# connection.close()